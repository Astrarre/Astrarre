allprojects {
    group = 'io.github.astrarre'
    if (project != rootProject) {
        plugins.apply 'java'
        plugins.apply 'idea'
        plugins.apply 'eclipse'
        plugins.apply 'java-library'
        plugins.apply 'maven-publish'
        plugins.apply "fabric-loom"
    }

    minecraft {
        addLibraryFilter {library ->
            return !(library.startsWith('net.minecraft:launchwrapper:') ||
                    library.startsWith('net.sf.jopt-simple:jopt-simple:') ||
                    library.startsWith('org.ow2.asm:asm-all:'))
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/' }
        maven { url 'https://maven.fabricmc.net/' }
        maven { url 'http://maven.modmuss50.me/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.legacyfabric.net/' }
        maven { url "https://maven.shedaniel.me/" }
        maven {
            name = 'HalfOf2'
            url = 'https://storage.googleapis.com/devan-maven/'
        }
    }

    sourceSets {
        testmod {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }

        test {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.compileClasspath
        }
    }

    jar {
        from "$rootProject.projectDir/LICENSE"
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"

        mappings "io.github.minecraft-cursed-legacy:plasma:b1.7.3-build.${project.plasma_build}"

        modImplementation("io.github.minecraft-cursed-legacy:cursed-fabric-loader:${project.loader_version}") {
            transitive false
        }

        testImplementation('junit:junit:4.13.1') {
            exclude module: 'fabric-loader'
        }
        testImplementation('net.devtech:PotatoUnit:1.0.3') {
            exclude module: 'fabric-loader'
        }
        testmodCompile sourceSets.main.output
        /*testmodImplementation('com.github.astei:lazydfu:0.1.1') {
            exclude module: 'fabric-loader'
            exclude module: 'fabric-api'
        }*/

        //modImplementation "com.github.minecraft-cursed-legacy:Cursed-Legacy-API:${project.api_version}"
    }

    processResources {
        inputs.property "version", project.version
        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    task sourcesJar(type: Jar) {
        group = "astrarre"
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    afterEvaluate {
        task remapJar2(type: remapJar.class) {
            group = "astrarre"
            archiveClassifier = "lite"
            addNestedDependencies = false
            // todo
            //remapAccessWidener = remapJar.remapAccessWidener
            //jarRemapper = remapJar.jarRemapper
            input = remapJar.input
        }
        remapJar2.dependsOn(jar)

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = "$project.name-cursed"
                    // regular old implementation jar
                    artifact(remapJar) {
                        builtBy remapJar
                    }

                    // sources for ye normal folk
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
                mavenJava2(MavenPublication) {
                    artifactId = "$project.name-cursed-lite"
                    artifact(remapJar2) {
                        builtBy remapJar2
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }

            repositories {
                maven {
                    def mavenUrl = project.hasProperty('maven_url') ? project.property('maven_url') : ""
                    url mavenUrl
                    if (mavenUrl.startsWith("http")) {
                        credentials {
                            username project.hasProperty('maven_username') ? project.property('maven_username') : ""
                            password project.hasProperty('maven_password') ? project.property('maven_password') : ""
                        }
                    }
                }
            }
        }
    }
}