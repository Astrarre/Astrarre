import java.nio.file.Files

static String computeVersion(Project project) {
    if(project.hasProperty("deps") || project == project.rootProject) {
        def projects = project == project.rootProject ? project.subprojects : project.deps.split(",").collect { project.rootProject.project(it) }
        def curr = project.vers.split("\\.")
        int major = Integer.parseInt(curr[0]), minor = Integer.parseInt(curr[1]), build = Integer.parseInt(curr[2])
        projects.each {
            def depVers = computeVersion(it)
            def str = depVers.split("\\.")
            major += Math.max(Integer.parseInt(str[0])-1, 0)
            minor += Integer.parseInt(str[1])
            build += Integer.parseInt(str[2])
        }
        return major + "." + minor + "." + build
    } else {
        return project.vers
    }
}

allprojects {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    group = 'io.github.astrarre'
    if (project != rootProject) {
        plugins.apply 'java'
        plugins.apply 'idea'
        plugins.apply 'eclipse'
        plugins.apply 'java-library'
        plugins.apply 'maven-publish'
        plugins.apply "fabric-loom"
    }

    version = computeVersion(project)
    println name + ":" + version
    afterEvaluate {
        if (project.hasProperty("deps") || project == rootProject) {
            def projs = project == project.rootProject ? project.subprojects : project.deps.split(",").collect { project.rootProject.project(it) }
            projs.each {
                it.tasks.publish.doLast(() -> project.tasks.publish)
                project.tasks.publish.dependsOn(it.tasks.publish)
            }
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        pom.withXml {
                            def depsNode = getOrCreateNode(asNode(), "dependencies")
                            projs.each {
                                def depNode = depsNode.appendNode("dependency")
                                depNode.appendNode("groupId", it.group)
                                depNode.appendNode("artifactId", "$it.name-fabric")
                                depNode.appendNode("version", it.version)
                                depNode.appendNode("scope", "compile")
                            }
                        }
                    }

                    mavenJava2(MavenPublication) {
                        pom.withXml {
                            def depsNode = getOrCreateNode(asNode(), "dependencies")
                            projs.each {
                                def depNode = depsNode.appendNode("dependency")
                                depNode.appendNode("groupId", it.group)
                                depNode.appendNode("artifactId", "$it.name-fabric-lite")
                                depNode.appendNode("version", it.version)
                                depNode.appendNode("scope", "compile")
                            }
                        }
                    }
                }
            }
        }
    }

    minecraft {}
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/' }
        maven { url 'https://maven.fabricmc.net/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.legacyfabric.net/' }
        maven { url "https://maven.shedaniel.me/" }
    }

    sourceSets {
        testmod {
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }

        test {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.compileClasspath
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${loader_version}"
        testImplementation('junit:junit:4.13.1') {
            exclude module: 'fabric-loader'
        }
        testImplementation('net.devtech:PotatoUnit:1.0.3') {
            exclude module: 'fabric-loader'
        }
        //testmodImplementation sourceSets.main.output
        testmodImplementation('com.github.astei:lazydfu:0.1.1') {
            exclude module: 'fabric-loader'
            exclude module: 'fabric-api'
        }

        // check for conflicts
        modRuntime("net.fabricmc.fabric-api:fabric-api:${fabric_version}") {
            exclude module: 'fabric-loader'
        }

        if (project.hasProperty("deps") || project == rootProject) {
            def projs = project == project.rootProject ? project.subprojects : project.deps.split(",").collect { project.rootProject.project(it) }
            projs.each {
                println "\t|- " + it.name
                api it
            }
        }
    }

    loom {
        runs {
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }
            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    processResources {
        inputs.property "version", project.version
        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    task sourcesJar(type: Jar) {
        group = "astrarre"
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    afterEvaluate {
        task remapJar2(type: remapJar.class) {
            group = "astrarre"
            addNestedDependencies = remapJar.addNestedDependencies
            addDefaultNestedDependencies = false
            remapAccessWidener = remapJar.remapAccessWidener
            jarRemapper = remapJar.jarRemapper
            input = remapJar.input
        }
        remapJar2.dependsOn(remapJar)

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = "$project.name-fabric"
                    // regular old implementation jar
                    artifact(remapJar) {
                        builtBy remapJar
                    }

                    // sources for ye normal folk
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
                mavenJava2(MavenPublication) {
                    artifactId = "$project.name-fabric-lite"
                    artifact(remapJar2) {
                        builtBy remapJar2
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }

            repositories {
                maven {
                    def mavenUrl = project.hasProperty('maven_url') ? project.property('maven_url') : ""
                    url mavenUrl
                    if (mavenUrl.startsWith("http")) {
                        credentials {
                            username project.hasProperty('maven_username') ? project.property('maven_username') : ""
                            password project.hasProperty('maven_password') ? project.property('maven_password') : ""
                        }
                    }
                }
            }
        }
    }

    jar {
        from "$rootProject.projectDir/LICENSE"
    }

    task moveMigrates {
        doLast {
            file("src/main/java").deleteDir()
            Files.move(file("remappedSrc").toPath(), file("src/main/java").toPath())
        }
    }

    migrateMappings {
        mappings("1.17-pre1+build.4")
    }

    tasks.moveMigrates.dependsOn(tasks.migrateMappings)

    task doNothing {}
}