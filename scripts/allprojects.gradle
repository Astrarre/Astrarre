
allprojects {
    group = 'io.github.astrarre'
    if (project != rootProject) {
        plugins.apply 'java'
        plugins.apply 'idea'
        plugins.apply 'eclipse'
        plugins.apply 'java-library'
        plugins.apply 'maven-publish'
        plugins.apply "forgified-fabric-loom"
    }

    minecraft {}
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/' }
        maven { url 'https://maven.fabricmc.net/' }
        maven { url "https://maven.shedaniel.me/" }
    }

    sourceSets {
        testmod {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }

        test {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.compileClasspath
        }
    }

    jar {
        from "$rootProject.projectDir/LICENSE"
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
        mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
        testmodCompile sourceSets.main.output
    }

    processResources {
        inputs.property "version", project.version
        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    task sourcesJar(type: Jar) {
        group = "astrarre"
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    afterEvaluate {
        task remapJar2(type: remapJar.class) {
            group = "astrarre"
            addNestedDependencies = false
            remapAccessWidener = remapJar.remapAccessWidener
            jarRemapper = remapJar.jarRemapper
            input = remapJar.input
        }
        remapJar2.dependsOn(jar)

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = "$project.name-fabric"
                    // regular old implementation jar
                    artifact(remapJar) {
                        builtBy remapJar
                    }

                    // sources for ye normal folk
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
                mavenJava2(MavenPublication) {
                    artifactId = "$project.name-fabric-lite"
                    artifact(remapJar2) {
                        builtBy remapJar2
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }

            repositories {
                maven {
                    def mavenUrl = project.hasProperty('maven_url') ? project.property('maven_url') : ""
                    url mavenUrl
                    if (mavenUrl.startsWith("http")) {
                        credentials {
                            username project.hasProperty('maven_username') ? project.property('maven_username') : ""
                            password project.hasProperty('maven_password') ? project.property('maven_password') : ""
                        }
                    }
                }
            }
        }
    }
}