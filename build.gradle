plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "fabric-loom" version "0.5.43"
}

group 'io.github.astrarre'
version '0.0.0'

loom {
    shareCaches = true
}

loom.runDir = "run"
apply from: 'scripts/allprojects.gradle'

static def nanoevents(Project project) {
    def nano_events_ver = "3.0.6"
    def nano_events_ap = "1.0.4"
    project.configure(project) {
        processResources {
            from(sourceSets.main.output.classesDirs.singleFile) {
                include "nanoevents/**"
            }
        }

        dependencies {
            modImplementation "net.devtech:NanoEvents:$nano_events_ver"

            testmodCompileOnly "net.devtech:nanoevents-ap:$nano_events_ap"
            compileOnly "net.devtech:nanoevents-ap:$nano_events_ap"

            annotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"
            testmodAnnotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"
        }
    }
}

static def moduleDependencies(project, List<String> depNames) {
    moduleDependencies(project, depNames, false)
}

static Project abstractions(Project project) { project.project(":astrarre-abstractions-v0") }

static def moduleDependencies(Project project, List<String> depNames, boolean compOnly) {
    project.configure(project) {
        def deps = depNames.iterator().collect { rootProject.project(":$it") }
        dependencies {
            deps.each {
                if (it != project) {
                    if (compOnly) {
                        compileOnly it
                    } else {
                        compile it
                    }
                    testmodImplementation it
                }
            }
        }

        if (!compOnly) {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        pom.withXml {
                            def depsNode = asNode().appendNode("dependencies")
                            deps.each {
                                if (it != project) {
                                    def depNode = depsNode.appendNode("dependency")
                                    depNode.appendNode("groupId", it.group)
                                    depNode.appendNode("artifactId", it.name)
                                    depNode.appendNode("version", it.version)
                                    depNode.appendNode("scope", "compile")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

apply from: 'scripts/modules.gradle'
apply from: 'scripts/main.gradle'
apply from: 'scripts/maven.gradle'