buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/astrarre/maven' }
    }

    dependencies {
        classpath 'io.github.astrarre:astrarre-stripper:1.0.1'
    }
}

import io.github.astrarre.stripper.Stripper
import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "fabric-loom" version "0.5.42"
}

group "io.github.astrarre"

version = project.mod_version
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

loom.runDir = "run"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.fabricmc.net/' }
        maven { url 'http://maven.modmuss50.me/' }
        maven { url 'https://dl.bintray.com/astrarre/maven' }
        maven { url 'https://jitpack.io' }
    }
}


//tasks.dependencies.dependsOn project(":Abstract").runMain todo
task fakeImpl(type: Jar) {
    archiveName 'fake_impl.jar'
    from zipTree("generated/impl.jar")
    from "generated/fabric.mod.json"
}

tasks.classes.dependsOn tasks.fakeImpl

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // to add compatibility
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    compileOnly files("$projectDir/generated/api_sources.jar")

    modImplementation "io.github.astrarre:astrarre-extra:0.0.1"

    // abstraction applicator fabric
    implementation 'com.github.Chocohead:fabric-asm:v2.1'
    include 'com.github.Chocohead:fabric-asm:v2.1'
}

sourceSets {
    main {
        runtimeClasspath += tasks.fakeImpl.outputs.files
        compileClasspath += files("$projectDir/generated/api.jar")
        resources {
            srcDir 'generated/include'
        }
    }
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

runClient {
    classpath 'generated/impl.jar'
}

runServer {
    classpath 'generated/impl.jar'
}

task runTestmodClient(type: RunClientTask) {
    classpath sourceSets.testmod.runtimeClasspath
}

task runTestmodServer(type: RunServerTask) {
    classpath sourceSets.testmod.runtimeClasspath
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

jar {
    from zipTree("generated/impl.jar")
    from "generated/include/manifest.properties"
    from "LICENSE"
}

task strippedJar(type: Zip, dependsOn: jar) {
    version "_temp_"
    // source
    from sourceSets.main.allSource
    from classes

    doLast {
        def file = outputs.files.first()
        def filter = new ArrayList<String>()
        filter.add("io/github/astrarre/internal/(.*)")
        Stripper.strip(filter, file, file)
    }
}

// api jar, what people are supposed to compileOnly depend on
task apiJar(type: Jar, dependsOn: strippedJar) {
    classifier = "api"
    from zipTree("generated/api_sources.jar")
    from zipTree("generated/api.jar")
    with strippedJar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "impl-fabric"
            // regular old implementation jar
            artifact(remapJar) {
                builtBy remapJar
            }

            // sources for ye normal folk
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }

        mavenApi(MavenPublication) {
            artifactId = "astrarre-api"
            artifact(apiJar) {
                builtBy apiJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}

bintray {
    user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
    publications = ["mavenJava"]
    publish = true
    //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = "maven"
        name = "astrarre-api"
        userOrg = "astrarre"
        licenses = ["LGPL-3.0"]
        version {
            name = version
            released = new Date()
        }
    }
}

subprojects {
    afterEvaluate {
        dependencies {
            parent.configurations.minecraftNamed.each {
                implementation files(it)
            }
        }
    }
}