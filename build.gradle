buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'Jitpack'
            url 'https://jitpack.io/'
        }
        maven {
            name = 'HalfOf2'
            url = 'https://storage.googleapis.com/devan-maven/'
        }
    }
    dependencies {
        classpath 'com.github.Chocohead:Fabric-Loom:d823377'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'fabric-loom'

version '1.1.1'
group 'io.github.astrarre'

minecraft {}

apply from: 'scripts/allprojects.gradle'

int major = 0, minor = 0, patch = 0
int total = subprojects.size(), current = 0
subprojects {project ->
    afterEvaluate {
        current++
        if(current == total) {
            String[] vers = version.split("\\.")
            major = Math.max(Integer.parseInt(vers[0]), major)
            minor += Integer.parseInt(vers[1])
            patch += Integer.parseInt(vers[2])
        }
        println version
    }
}
static def fapi(Project proj, String... modules) {
    proj.extensions.add("fapi_deps", modules)
    proj.configure(proj) {
        dependencies {
            //if(modules.length == 0) {
                modImplementation("com.github.minecraft-cursed-legacy:Cursed-Legacy-API:${project.api_version}") {
                    exclude module: 'cursed-fabric-loader'
                }
            /*} else {
                modules.each {
                    include(modImplementation(fabricApi.module(it, fabric_version)) {
                        exclude module: 'cursed-fabric-loader'
                    })
                }
            }*/
        }

        modules.each {
            def str = it
            publishing {
                publications {
                    mavenJava2(MavenPublication) {
                        pom.withXml {
                            def depsNode = getOrCreateNode(asNode(), "dependencies")
                            proj.each {
                                def depNode = depsNode.appendNode("dependency")
                                depNode.appendNode("groupId", "com.github.minecraft-cursed-legacy")
                                depNode.appendNode("artifactId", "Cursed-Legacy-API")
                                depNode.appendNode("version", fabricApi.moduleVersion(str, fabric_version))
                                depNode.appendNode("scope", "compile")
                            }
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    dependsOn(project, subprojects)
    modImplementation("me.shedaniel:RoughlyEnoughItems:5.11.188") {
        exclude module: 'fabric-api'
        exclude module: 'fabric-loader'
    }
}

fapi(project)
import net.fabricmc.loom.task.fernflower.FernFlowerTask
println genSources.class

static def nanoevents(Project proj) {
    proj.configure(proj) {
        def nano_events_ver = "3.0.6"
        def nano_events_ap = "1.0.4"
        modImplementation("net.devtech:NanoEvents:$nano_events_ver") {
            transitive = false
        }

        testmodCompileOnly "net.devtech:nanoevents-ap:$nano_events_ap"
        compileOnly "net.devtech:nanoevents-ap:$nano_events_ap"
        annotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"
        testmodAnnotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"

        processResources {
            from(sourceSets.main.output.classesDirs.singleFile) {
                include "nanoevents/**"
            }
        }
    }
}

static def dependsOn(Project proj, Iterable<Project> projs) {
    proj.dependencies {
        projs.each {
            compile it
            testmodCompile it.sourceSets.main.output
        }
    }
    proj.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = getOrCreateNode(asNode(), "dependencies")
                    projs.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", "$it.name-fabric")
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }

            mavenJava2(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    projs.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", "$it.name-fabric-lite")
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

static def dependsOn(Project proj, String... projects) {
    List<Project> projs = projects.collect { proj.rootProject.project(it) }
    dependsOn(proj, projs)
}

static Node getOrCreateNode(Node node, String name) {
    Node dependencies = null
    for(Node n : node) {
        if(name == n.name()) {
            dependencies = n
            break
        }
    }
    if(dependencies == null) {
        dependencies = node.appendNode(name)
    }
    return dependencies
}