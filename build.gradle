buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://dl.bintray.com/astrarre/maven" }
    }

    dependencies {
        classpath 'io.github.astrarre:astrarre-stripper:1.0.1'
    }
}

plugins {
    id 'fabric-loom' version '0.5.42'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id 'java-library'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group


repositories {
    mavenCentral()
    maven { url = "https://dl.bintray.com/astrarre/maven" }
}

minecraft {}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    compileOnly files('generated/api.jar')
    compileOnly files('generated/api_sources.jar')
    api("io.github.astrarre:astrarre-extra:0.0.1")

    runtimeOnly files('generated/impl.jar')
}


processResources {
    inputs.property "version", project.version
    from(sourceSets.main.output.classesDirs.singleFile) {
        include "nanoevents/**"
    }

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from "LICENSE"
    from "generated/manifest.properties"
}

import io.github.astrarre.stripper.Stripper
task strippedJar(type: Jar, dependsOn: classes) {
    classifier = "stripped"
    // source
    from sourceSets.main.allSource
    // bytecode
    with jar
    doLast {
        def file = outputs.files.first()
        def filter = new ArrayList<String>()
        Stripper.strip(filter, file, file)
    }
}



// api jar, what people are supposed to compileOnly depend on
task apiJar(type: Jar, dependsOn: strippedJar) {
    classifier = "api"
    from zipTree("generated/api_sources.jar")
    from zipTree("generated/api.jar")
    from zipTree(strippedJar.archivePath)
}

import net.fabricmc.loom.task.RemapJarTask

task implUnmapped(type: Jar, dependsOn: jar) {
    classifier = "impl-dev"
    with jar
    from zipTree("generated/impl.jar")
}

task remapJar(type: RemapJarTask, overwrite: true, dependsOn: implUnmapped) {
    input.set(implUnmapped.archivePath)
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // remap jar task is where you should look
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(apiJar) {
                builtBy apiJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

bintray {
    user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
    publications = ["mavenJava"]
    publish = true //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = "maven"
        name = "api"
        userOrg = "astrarre"
        licenses = ["LGPL-3.0"]
        version {
            name = version
            released = new Date()
        }
    }
}