buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://dl.bintray.com/astrarre/maven' }
    }

    dependencies {
        classpath 'io.github.astrarre:astrarre-stripper:1.1.1'
    }
}

import io.github.astrarre.stripper.Stripper
import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

import java.util.stream.Collectors

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "fabric-loom" version "0.5.42"
}

version = project.mod_version

loom.runDir = "run"
loom {
    shareCaches = true
}

def root = project
allprojects {
    plugins.apply('java')
    plugins.apply('idea')
    plugins.apply('eclipse')
    plugins.apply('java-library')
    plugins.apply('maven-publish')
    plugins.apply("com.jfrog.bintray")
    plugins.apply("fabric-loom")

    group "io.github.astrarre"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.fabricmc.net/' }
        maven { url 'http://maven.modmuss50.me/' }
        maven { url 'https://dl.bintray.com/astrarre/maven' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${root.minecraft_version}"
        mappings "net.fabricmc:yarn:${root.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${root.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${root.fabric_version}"
    }
}

subprojects {
    def parentProject = parent
    sourceSets {
        abstracter {
            runtimeClasspath += parentProject.configurations.minecraftNamed
            compileClasspath += parentProject.configurations.minecraftNamed
        }

        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    dependencies {
        modImplementation "io.github.astrarre:astrarre-stripper:1.1.1"
        testmodCompile sourceSets.main.output
    }

    def hasAbstractions = {
        dependencies {
            implementation project(":astrarre-base")
            include project(":astrarre-base")
            // todo find out how to include impl jar
            compileOnly files("$buildDir/abstracted/api.jar")
            compileOnly files("$buildDir/abstracted/api_sources.jar")
            runtime zipTree("$buildDir/abstracted/impl.jar")
        }

        tasks.classes.dependsOn tasks.generateAbstractions
    }

    task generateAbstractions(type: JavaExec) {
        group = "abstract"
        description = "Runs the abstracter config class"
        classpath = sourceSets.abstracter.runtimeClasspath
        main = "abstract.Main"

        def file = new File(buildDir, "abstracter_gradle_info.properties")
        args file.absolutePath

        doFirst {
            if (!file.exists()) {
                def properties = new Properties()
                properties.setProperty("mappings", loom.getMappingsProvider().tinyMappings.absolutePath)
                properties.setProperty("minecraft", configurations.minecraftNamed.resolve().last().absolutePath)
                properties.setProperty("libraries", configurations.minecraftLibraries.resolve().stream().map() { it.absolutePath }.collect(Collectors.joining(";")))
                properties.setProperty("projectDir", projectDir.absolutePath)
                properties.setProperty("api_jar", "$buildDir/abstracted/api.jar")
                properties.setProperty("api_sources_jar", "$buildDir/abstracted/api_sources.jar")
                properties.setProperty("impl_jar", "$buildDir/abstracted/impl.jar")
                def out = new FileWriter(file)
                properties.store(out, "Minecraft Libraries, Emitted by classes task")
                out.close()
            }
        }
    }

    processResources {
        inputs.property "version", project.version

        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"
            expand "version": project.version
        }

        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    jar {
        from "$parent.projectDir/LICENSE"
    }

    // configure the maven publication
    publishing {
        publications {
            /*mavenJava(MavenPublication) {
                artifactId = "impl-fabric"
                // regular old implementation jar
                artifact(remapJar) {
                    builtBy remapJar
                }

                // sources for ye normal folk
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            }

            mavenApi(MavenPublication) {
                artifactId = "astrarre-api"
                artifact(apiJar) {
                    builtBy apiJar
                }
            }*/
        }

        // select the repositories you want to publish to
        repositories {
            // uncomment to publish to the local maven
            mavenLocal()
        }
    }

    bintray {
        user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
        key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
        publications = ["mavenJava"]
        publish = true
        //[Default: false] Whether version should be auto published after an upload
        pkg {
            repo = "maven"
            name = "astrarre-api"
            userOrg = "astrarre"
            licenses = ["LGPL-3.0"]
            version {
                name = version
                released = new Date()
            }
        }
    }
}