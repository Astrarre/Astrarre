buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://dl.bintray.com/astrarre/maven' }
    }

    dependencies {
        classpath 'io.github.astrarre:astrarre-stripper:1.1.4'
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "fabric-loom" version "0.5.43"
}

group 'io.github.astrarre'
version '0.0.0'


minecraft {}
loom {
    runDir = "run"
}

sourceSets {
    generator {
    }
    testmod {
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    abstracter {
        runtimeClasspath += configurations.minecraftNamed
        compileClasspath += configurations.minecraftNamed
    }
}

apply from: 'scripts/dependencies.gradle'

processResources {
    from(sourceSets.main.output.classesDirs.singleFile) {
        include "nanoevents/**"
    }

    inputs.property "version", project.version
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

task sourcesJar(type: Jar) {
    group = "astrarre"
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

import io.github.astrarre.stripper.gradle.StrippedJar
task stripJar(type: StrippedJar) {
    group = "astrarre"
    archiveClassifier = "stripped"
    from sourceSets.main.allJava
    with jar
}

task apiJar(type: Jar) {
    group = "astrarre"
    archiveClassifier = "api"
    with stripJar
    afterEvaluate {
        if (project.tasks.findByName("generateAbstractions") != null) {
            from zipTree("$buildDir/abstracted/api.jar")
            from zipTree("$buildDir/abstracted/api_sources.jar")
        }
    }
}

apply from: 'scripts/abstraction.gradle'

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name-fabric"
            // regular old implementation jar
            artifact(remapJar) {
                builtBy remapJar
            }

            // sources for ye normal folk
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }

        mavenApi(MavenPublication) {
            artifactId = "$project.name-api"
            artifact(apiJar) {
                builtBy apiJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}

bintray {
    user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
    publications = ["mavenJava", "mavenApi"]
    publish = true
    //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = "maven"
        name = "astrarre-api"
        userOrg = "astrarre"
        licenses = ["LGPL-3.0"]
        version {
            name = version
            released = new Date()
        }
    }
}