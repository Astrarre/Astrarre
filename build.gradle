plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'forgified-fabric-loom' version '0.6-SNAPSHOT'
}

version '1.1.1'
group = 'io.github.astrarre'

loom {
    shareCaches = true
    //runDir = "run"
}

apply from: 'scripts/allprojects.gradle'

dependencies {
    dependsOn(project, subprojects)
}

static def dependsOn(Project proj, Iterable<Project> projs) {
    proj.dependencies {
        projs.each {
            compile it
            testmodCompile it.sourceSets.main.output
        }
    }
    proj.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = getOrCreateNode(asNode(), "dependencies")
                    projs.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", "$it.name-forge")
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }

            mavenJava2(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    projs.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", "$it.name-forge-lite")
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

static def dependsOn(Project proj, String... projects) {
    List<Project> projs = projects.collect { proj.rootProject.project(it) }
    dependsOn(proj, projs)
}

static Node getOrCreateNode(Node node, String name) {
    Node dependencies = null
    for(Node n : node) {
        if(name == n.name()) {
            dependencies = n
            break
        }
    }
    if(dependencies == null) {
        dependencies = node.appendNode(name)
    }
    return dependencies
}