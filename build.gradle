plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "fabric-loom" version "0.5.43"
}

group 'io.github.astrarre'
version '0.0.0'

loom {
    shareCaches = true
}

loom.runDir = "run"
apply from: 'scripts/allprojects.gradle'

static def nanoevents(Project project) {
    def nano_events_ver = "3.0.6"
    def nano_events_ap = "1.0.4"
    project.configure(project) {
        processResources {
            from(sourceSets.main.output.classesDirs.singleFile) {
                include "nanoevents/**"
            }
        }

        dependencies {
            modImplementation "net.devtech:NanoEvents:$nano_events_ver"

            testmodCompileOnly "net.devtech:nanoevents-ap:$nano_events_ap"
            compileOnly "net.devtech:nanoevents-ap:$nano_events_ap"

            annotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"
            testmodAnnotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"
        }
    }
}

static def moduleDependencies(project, List<String> depNames) {
    moduleDependencies(project, depNames, false)
}

static def moduleDependencies(project, List<String> depNames, boolean co) {
    project.configure(project) {
        def deps = depNames.iterator().collect { rootProject.project(":$it") }
        dependencies {
            deps.each {
                if (it != project) {
                    if (co) {
                        compileOnly it
                    } else {
                        compile it
                    }
                }
            }
        }

        if (!co) {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        pom.withXml {
                            def depsNode = asNode().appendNode("dependencies")
                            deps.each {
                                if (it != project) {
                                    def depNode = depsNode.appendNode("dependency")
                                    depNode.appendNode("groupId", it.group)
                                    depNode.appendNode("artifactId", it.name)
                                    depNode.appendNode("version", it.version)
                                    depNode.appendNode("scope", "compile")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

import org.gradle.api.internal.file.collections.FileTreeAdapter
import org.gradle.api.internal.file.collections.GeneratedSingletonFileTree
import org.gradle.api.internal.file.copy.CopySpecInternal

import java.util.stream.Collectors

static def hasAbstraction(Project proj) {
    println("$proj generates abstractions")
    moduleDependencies(proj, ['astrarre-common-v0'])
    proj.configure(proj) {
        sourceSets {
            abstracter {
                runtimeClasspath += proj.rootProject.configurations.minecraftNamed
                compileClasspath += proj.rootProject.configurations.minecraftNamed
            }
        }

        dependencies {
            abstracterCompile "io.github.astrarre:abstracter:1.2.5"
        }

        task fakeImplJar(type: Jar) {
            archiveName 'fake_impl.jar'
            from zipTree("$proj.buildDir/abstracted/impl.jar")
            def jar = (CopySpecInternal) getRootSpec().addFirst().into("")
            jar.addChild().from {
                GeneratedSingletonFileTree artificalFabricModJson = new GeneratedSingletonFileTree(getTemporaryDirFactory(), "fabric.mod.json", {
                    it.write("{\"schemaVersion\": 1,\"id\":\"$proj.name-fake-impl\",\"version\": \"version\"}".bytes)
                })
                return new FileTreeAdapter(artificalFabricModJson)
            }
        }

        dependencies {
            runtimeOnly tasks.fakeImplJar.outputs.files
            compile files("$buildDir/abstracted/api.jar")
            testmodRuntimeOnly tasks.fakeImplJar.outputs.files
            testmodCompile files("$buildDir/abstracted/api.jar")
        }

        tasks.compileJava.dependsOn tasks.fakeImplJar

        task generateAbstractions(type: JavaExec) {
            group = "astrarre"
            description = "Runs the abstracter config class"
            classpath = sourceSets.abstracter.runtimeClasspath
            inputs.files classpath

            outputs.file "$buildDir/abstracted/api.jar"
            outputs.file "$buildDir/abstracted/api_sources.jar"
            outputs.file "$buildDir/abstracted/impl.jar"
            outputs.cacheIf { true }
            main = "Main"

            def file = new File(buildDir, "abstracter_gradle_info.properties")
            args file.absolutePath

            doFirst {
                new File(buildDir, "abstracted").mkdirs()
                if (!file.exists()) {
                    def properties = new Properties()
                    properties.setProperty("mappings", loom.getMappingsProvider().tinyMappings.absolutePath)
                    properties.setProperty("minecraft", configurations.minecraftNamed.resolve().last().absolutePath)
                    properties.setProperty("libraries", configurations.minecraftLibraries.resolve().stream().map() { it.absolutePath }.collect(Collectors.joining(";")))
                    properties.setProperty("api_jar", "$buildDir/abstracted/api.jar")
                    properties.setProperty("api_sources_jar", "$buildDir/abstracted/api_sources.jar")
                    properties.setProperty("impl_jar", "$buildDir/abstracted/impl.jar")
                    def out = new FileWriter(file)
                    properties.store(out, "Minecraft Libraries, Emitted by classes task")
                    out.close()
                }
            }
        }

        tasks.compileJava.dependsOn tasks.generateAbstractions
        tasks.fakeImplJar.dependsOn tasks.generateAbstractions

        task implJar(type: Jar, dependsOn: jar) {
            group = "astrarre"
            classifier = "impl-dev"
            with jar
            from zipTree("$buildDir/abstracted/impl.jar")
        }

        afterEvaluate {
            remapJar {
                classifier = "impl"
                input = implJar.outputs.files.first()
            }
            tasks.remapJar.dependsOn implJar
        }
    }
}

apply from: 'scripts/modules.gradle'
apply from: 'scripts/main.gradle'
apply from: 'scripts/maven.gradle'