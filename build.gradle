plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id "fabric-loom" version "0.7.26"
}

version '0.0.0'
group = 'io.github.astrarre'

loom {
    shareCaches = true
    //runDir = "run"
}

apply from: 'scripts/allprojects.gradle'

static def fapi(Project proj, String... modules) {
    proj.configure(proj) {
        dependencies {
            if(modules.length == 0) {
                modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_version}") {
                    exclude module: 'fabric-loader'
                }
            } else {
                modules.each {
                    include(modImplementation(fabricApi.module(it, fabric_version)) {
                        exclude module: 'fabric-loader'
                    })
                }
            }
        }
    }
}

dependencies {
    dependsOn(project, subprojects)
    modRuntime("me.shedaniel:RoughlyEnoughItems:5.11.188") {
        exclude module: 'fabric-api'
        exclude module: 'fabric-loader'
    }
}

fapi(project)

static def nanoevents(Project proj) {
    proj.configure(proj) {
        def nano_events_ver = "3.0.6"
        def nano_events_ap = "1.0.4"
        modImplementation("net.devtech:NanoEvents:$nano_events_ver") {
            transitive = false
        }

        testmodCompileOnly "net.devtech:nanoevents-ap:$nano_events_ap"
        compileOnly "net.devtech:nanoevents-ap:$nano_events_ap"
        annotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"
        testmodAnnotationProcessor "net.devtech:nanoevents-ap:$nano_events_ap"

        processResources {
            from(sourceSets.main.output.classesDirs.singleFile) {
                include "nanoevents/**"
            }
        }
    }
}

static def dependsOn(Project proj, Iterable<Project> projs) {
    proj.dependencies {
        projs.each {
            compile it
            testmodCompile it.sourceSets.main.output
        }
    }
    proj.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    projs.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", "$it.name-fabric")
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

static def dependsOn(Project proj, String... projects) {
    List<Project> projs = projects.collect { proj.rootProject.project(it) }
    dependsOn(proj, projs)
}