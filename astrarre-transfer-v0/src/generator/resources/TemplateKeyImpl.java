package io.github.astrarre.transfer.v0.api.transaction.keys.generated;
// this class is autogenerated

//%antiformatter%import io.github.astrarre.transfer.v0.api.transaction.TransactionHandler;
//%antiformatter%import io.github.astrarre.transfer.v0.api.transaction.Key;
//%antiformatter%import io.github.astrarre.transfer.v0.api.transaction.Transaction;
//%antiformatter%import it.unimi.dsi.fastutil.%lower%s.%Upper%ArrayList;

// @formatter:off
public class %Upper%KeyImpl extends Key.%Upper% {
	private final TransactionHandler handler;
	private final %Upper%ArrayList values = new %Upper%ArrayList();

	public %Upper%KeyImpl(TransactionHandler handler, %lower% originalValue) {
		this.handler = handler;
		this.values.add(0, originalValue);
	}

	public %Upper%KeyImpl(%lower% originalValue) {this(new TransactionHandler(), originalValue);}

	protected %Upper%KeyImpl(TransactionHandler handler) {
		this.handler = handler;
	}

	protected %Upper%KeyImpl() {
		this(new TransactionHandler());
	}

	@Override
	public %lower% get(Transaction transaction) {
		if(transaction == null) {
			return this.getTrue();
		}
		return this.values.top%Upper%();
	}

	@Override
	protected void onApply(Transaction transaction) {
		this.handler.pop(transaction);
		Transaction parent = transaction.getParent();
		this.set(parent, this.values.pop%Upper%());
	}

	@Override
	protected void onAbort(Transaction transaction) {
		this.values.pop%Upper%();
		this.handler.pop(transaction);
	}

	@Override
	public void set(Transaction transaction, %lower% val) {
		if(transaction == null) {
			this.setTrue(val);
			return;
		}

		if (this.handler.store(transaction)) {
			this.values.set(this.values.size() - 1, val);
		} else {
			this.values.push(val);
			transaction.enlistKey(this);
		}
	}

	/**
    * @return the 'true' value of the key
    */
	protected %lower% getTrue() {
		return this.values.get%Upper%(0);
	}

	/**
	 * @param val the 'true' value of the key
	 */
	protected void setTrue(%lower% val) {
		this.values.set(0, val);
	}
}
